#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jan 27 15:27:35 2020

@author: michael
"""

def batch(self, batch_size = 100):
        '''
        creates a batch from input one and two 
        output - joint and marginal distributions
        '''
        input1_joint = []
        input2_joint = []
        input2_marginal = []
        combined_dataset = []
        
        for i in range(10):
            #print(i)
            temp_dataset = torchvision.datasets.MNIST('home/michael/Documents/MNIST data', train = False, transform=torchvision.transforms.Compose(
                [torchvision.transforms.ToTensor(),torchvision.transforms.Normalize((0.1307,),(0.3081,))]), download = True)
            idx = temp_dataset.targets==i
            temp_dataset.targets = temp_dataset.targets[idx]
            temp_dataset.data = temp_dataset.data[idx]
            
            input1_joint.append(temp_dataset)
            temp_dataset = (torch.tensor(temp_dataset.data), torch.tensor(temp_dataset.targets))
            
            temp_dataset2 = torchvision.datasets.MNIST('home/michael/Documents/MNIST data', train = False, transform=torchvision.transforms.Compose(
                [torchvision.transforms.ToTensor(),torchvision.transforms.Normalize((0.1307,),(0.3081,))]), download = True)
            idx = np.random.randint(0,len(temp_dataset2),len(temp_dataset))
            marginal_temp = torchvision.datasets.MNIST('home/michael/Documents/MNIST data', train = False, transform=torchvision.transforms.Compose(
                [torchvision.transforms.ToTensor(),torchvision.transforms.Normalize((0.1307,),(0.3081,))]), download = True)
            marginal_temp.targets = temp_dataset2.targets[idx]
            marginal_temp.data = temp_dataset2.data[idx]
            input2_marginal.append(marginal_temp)
            marginal_temp = (torch.tensor(marginal_temp.data), torch.tensor(marginal_temp.targets))
            
            idx = temp_dataset2.targets==i
            temp_dataset2.targets = temp_dataset2.targets[idx]
            temp_dataset2.data = temp_dataset2.data[idx]
            idx = torch.randperm(len(temp_dataset2))
            temp_dataset2.targets = temp_dataset2.targets[idx]
            temp_dataset2.data = temp_dataset2.data[idx]
            input2_joint.append(temp_dataset2)
            temp_dataset2 = (torch.tensor(temp_dataset2.data),torch.tensor(temp_dataset2.targets))
            
            combined_dataset.append(torch.utils.data.TensorDataset(temp_dataset, temp_dataset2, marginal_temp))
            
        self.marginal = marginal_temp
        self.joint = temp_dataset2
        #input1_joint = torch.utils.data.ConcatDataset(input1_joint)
        #input2_joint = torch.utils.data.ConcatDataset(input2_joint)
        #input2_marginal = torch.utils.data.ConcatDataset(input2_marginal)
        combined_dataset = torch.utils.data.ConcatDataset(combined_dataset)